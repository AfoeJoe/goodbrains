// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_HEROKU")
}

// post is qusestion
model Questions {
  id            Int      @id @default(autoincrement())
  question      String
  options       String[]
  correctAnswer Int
  hintText      String?
  photoUrl      String?
  subject       SUBJECT?

  QuestionsMeta QuestionsMeta[]

  @@index([subject])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  perfection    Int       @default(0) //977 === 97.7%
  totalAttempts BigInt    @default(0)

  accounts      Account[]
  sessions      Session[]
  QuestionsMeta QuestionsMeta[]
  Profile       Profile[]
  Attempts      Attempts[]
}

model QuestionsMeta {
  id               Int       @id @default(autoincrement())
  year             DateTime?
  exam             EXAM      @default(UNDERTERMINED)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  published        Boolean   @default(true)
  totalAppearances Int?      @default(0)
  average          Int?      @default(0)
  question         Questions @relation(fields: [questionsId], references: [id])
  questionsId      Int

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  @@index([average])
}

model Profile {
  id   Int     @id @default(autoincrement())
  bio  String?
  role Role    @default(USER)

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Attempts {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  result      Int //977 === 97.7%
  questionId  Int[]
  userAnswers Int[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum EXAM {
  WAEC
  JAMB
  UNDERTERMINED
}

enum SUBJECT {
  ENGLISH
  MATHS
  BIOLOGY
  PHYSICS
  CHEMISTRY
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
